	<project name="Team_58" default="compile" basedir=".">
	  <property file="build.properties"/>

	  <!-- init target makes the directory structure. You may not
	       require this if you set your environment up by hand. -->
	  <target name="init">
	    <tstamp/>
	    <mkdir dir="${classes.dir}"/>
	  </target>

	  <!-- Compiles your java files and puts the classes in classes.dir -->
	  <target name="compile" depends="init">
	    <javac debug="true"
	      srcdir="${src.dir}"
	      destdir="${classes.dir}">
	      <!-- Make sure you set your classpath! -->
	      <classpath>
	        <fileset dir="${tomcat.home}/lib" includes="servlet-api.jar"/>
	      	<fileset dir="${tomcat.home}/lib" includes="freemarker.jar"/>
	      	<fileset dir="${tomcat.home}/lib" includes="mssql-jdbc-7.2.1.jre8.jar"/>
	      	<fileset dir="${tomcat.home}/lib"  includes="json-simple-1.1.1.jar"/>
	        <pathelement path="${classes.dir}" />
	      </classpath>
	    </javac>
	  </target>

  <!-- The deploy target will be highly dependent on your deployed app.
       For example, if you are building a web-app, you should include
       commands to copy files over to your deploy directory according
       to the servlet specification, or create a .war file (via dist)
       and copy it over. If you are creating a standalone app (like this
       example does), you can create it in a given directory, or create
       your dist jar first that can be run using java -jar. -->
  <target name="deploy" depends="dist">
    <copy file="${dist.jar}" todir="${tomcat.home}/webapps" overwrite="yes"/>
  </target>
      
  <target name="build" depends="compile">
    <mkdir dir="${build.home}"/>
    <mkdir dir="${build.home}/WEB-INF"/>
    <copy todir="${build.home}/WEB-INF">
      <fileset dir="." includes="${classes.dir}/**,${lib.dir}/**" excludes="${classes.dir}/driver/**"/>
    </copy>
  	<copy todir="${build.home}/WEB-INF/classes">
  	  <fileset dir="${resources.dir}" includes="**/*.txt,**/*.properties" excludes="**/*.html,**/*.jsp"/>
  	</copy>
  	<copy file="${resources.dir}/login.jsp" tofile="${build.home}/login.jsp"/>
  	<copy file="${resources.dir}/forgotpassword.jsp" tofile="${build.home}/forgotpassword.jsp"/>
  	<copy file="${resources.dir}/statistics.jsp" tofile="${build.home}/statistics.jsp"/>
  	<copy file="${resources.dir}/professorHome.ftl" tofile="${build.home}/professorHome.ftl"/>
  	<copy file="${resources.dir}/createQuestions.ftl" tofile="${build.home}/createQuestions.ftl"/>
  	<copy file="${resources.dir}/createQuiz.ftl" tofile="${build.home}/createQuiz.ftl"/>
  	<copy file="${resources.dir}/courseDashboard.ftl" tofile="${build.home}/courseDashboard.ftl"/>
  	<copy file="${resources.dir}/viewQuiz.ftl" tofile="${build.home}/viewQuiz.ftl"/>
  	<copy file="${resources.dir}/gradeQuiz.ftl" tofile="${build.home}/gradeQuiz.ftl"/>
  	<copy file="${resources.dir}/style.css" tofile="${build.home}/style.css"/>
  	<copy file="${resources.dir}/stylesheet.css" tofile="${build.home}/stylesheet.css"/>
  	<copy file="${resources.dir}/studentHome.ftl" tofile="${build.home}/studentHome.ftl"/>
  	<copy file="${resources.dir}/displayQuizInstruction.ftl" tofile="${build.home}/displayQuizInstruction.ftl"/>
  	<copy file="${resources.dir}/displayQuiz.ftl" tofile="${build.home}/displayQuiz.ftl"/>
  	<copy file="${resources.dir}/displayGrades.ftl" tofile="${build.home}/displayGrades.ftl"/>
  	<copy file="${resources.dir}/studentCourseHome.ftl" tofile="${build.home}/studentCourseHome.ftl"/>
  	<copy file="${resources.dir}/submitQuizSuccess.ftl" tofile="${build.home}/submitQuizSuccess.ftl"/>
  	<copy file="${resources.dir}/logout.html" tofile="${build.home}/logout.html"/>
    <copy file="web.xml" tofile="${build.home}/WEB-INF/web.xml"/>
  </target>
    
  <!-- This example dist target merely jars up the webapp files -->
  <target name="dist" depends="build">
    <jar destfile="${dist.jar}" basedir="${build.home}">
    </jar>
  </target>


	  <!-- submit creates a single jarfile that you will upload to the
	       Gradebook channel on the class portal. -->
	  <target name="submit" depends="dist">
	    <jar destfile="${submit.jar}" basedir="." includes="README.txt,build.properties,build.xml,web.xml,${src.dir}/**,${docs.dir}/**,${javadoc.dir}/**,${properties.dir}/**,${lib.dir}/**,${classes.dir}/**">
	     </jar>
	  </target>

	  <!-- Clean -->
	  <target name="clean">
	    <delete file="${dist.jar}"/>
	    <delete dir="${build.home}"/>
	    <delete dir="${classes.dir}"/>
	  </target>

	  <!-- Clean all -->
	  <target name="cleanall" depends="clean">
	    <delete file="${submit.jar}"/>
	  </target>

	</project>
	    

